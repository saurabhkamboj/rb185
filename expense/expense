#! /usr/bin/env ruby

require 'pg'
require 'bundler/setup'
require 'date'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def setup_schema
    result = @connection.exec <<~sql
      SELECT COUNT(*) FROM information_schema.tables
        WHERE table_schema = 'public' AND table_name = 'expenses';
    sql

    if result.field_values('count') == '0'
      @connection.exec <<~sql
        "CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6, 2) NOT NULL,
          memo text NOT NULL,
          created_on date NOT NULL
        )"
      sql
    end
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"

    @connection.exec_params(sql, [amount, memo, date])
  end

  def delete_expense(id)
    result = @connection.exec_params("SELECT * FROM expenses WHERE id = $1", [id])

    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(sql, [id])

      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "There is no expense with id '#{id}'."
    end
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts 'All expenses have been deleted.'
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on")

    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def list_select_expenses(term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{term}%"])

    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  private

  def display_expenses(tuples)
    tuples.each do |tuple|
      columns = [ tuple['id'].rjust(3),
                  tuple['created_on'].rjust(10),
                  tuple['amount'].rjust(10),
                  tuple['memo'] ]

      puts columns.join(' | ')
    end

    puts '-' * 50

    amount_total = tuples.field_values('amount').map(&:to_f).reduce(&:+)

    puts "Total #{amount_total.round(2).to_s.rjust(23)}"
  end

  def display_count(tuples)
    count = tuples.ntuples

    case count
    when 0
      puts 'There are no expenses.'
    when 1
      puts 'There is 1 expense.'
    else
      puts "There are #{count} expenses."
    end
  end

  def amount_total(tuples)
    tuples.values.reduce(0) do |acc, tuple|
      acc + tuple[1].to_f
    end.to_s
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift

    case command
    when 'add'
      amount, memo = ARGV[0], ARGV[1]

      abort 'You must provide an amount and memo.' unless amount && memo

      @application.add_expense(amount, memo)
    when 'list'
      @application.list_expenses
    when 'search'
      @application.list_select_expenses(ARGV[0])
    when 'delete'
      @application.delete_expense(ARGV[0])
    when 'clear'
      puts '=> This will remove all expenses, are you sure? (y/n)'
      response = $stdin.getch

      @application.delete_all_expenses if response == 'y'
    else
      puts info
    end
  end

  def info
    <<~INFO
      An expense recording system

      Commands:

      add AMOUNT MEMO - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    INFO
  end
end

CLI.new.run(ARGV)
